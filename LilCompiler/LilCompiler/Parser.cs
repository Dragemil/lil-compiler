// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-BGFGHK4
// DateTime: 31.05.2020 21:54:57
// UserName: drage
// Input file <mini.y - 31.05.2020 21:39:06>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Semicolon=10,Assign=11,Eof=12,
    Or=13,And=14,BitOr=15,BitAnd=16,Equality=17,NotEquality=18,
    Greater=19,GreaterOrE=20,Less=21,LessOrE=22,Plus=23,Minus=24,
    Multiplies=25,Divides=26,Not=27,BitNot=28,OpenPar=29,ClosePar=30,
    OpenCurl=31,CloseCurl=32,IntDecl=33,DoubleDecl=34,BoolDecl=35,Error=36,
    Return=37,True=38,False=39,Ident=40,IntNum=41,DoubleNum=42,
    StringVal=43};

public struct ValueType
#line 9 "mini.y"
{
public string      val;
public SyntaxNode  node;
}
#line default
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[19];
  private static State[] states = new State[35];
  private static string[] nonTerms = new string[] {
      "exp", "term", "stmnt", "decl", "prog", "decllist", "start", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-7,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{31,4});
    states[4] = new State(new int[]{35,8,33,11,34,14,38,23,39,24,41,25,42,26,40,27,9,30,32,33},new int[]{-6,5,-4,6,-5,17,-3,18,-1,20,-2,22});
    states[5] = new State(-2);
    states[6] = new State(new int[]{35,8,33,11,34,14,38,23,39,24,41,25,42,26,40,27,9,30,32,33},new int[]{-6,7,-4,6,-5,17,-3,18,-1,20,-2,22});
    states[7] = new State(-3);
    states[8] = new State(new int[]{40,9});
    states[9] = new State(new int[]{10,10});
    states[10] = new State(-5);
    states[11] = new State(new int[]{40,12});
    states[12] = new State(new int[]{10,13});
    states[13] = new State(-6);
    states[14] = new State(new int[]{40,15});
    states[15] = new State(new int[]{10,16});
    states[16] = new State(-7);
    states[17] = new State(-4);
    states[18] = new State(new int[]{38,23,39,24,41,25,42,26,40,27,9,30,32,33},new int[]{-5,19,-3,18,-1,20,-2,22});
    states[19] = new State(-8);
    states[20] = new State(new int[]{10,21});
    states[21] = new State(-10);
    states[22] = new State(-12);
    states[23] = new State(-14);
    states[24] = new State(-15);
    states[25] = new State(-16);
    states[26] = new State(-17);
    states[27] = new State(new int[]{11,28,10,-18});
    states[28] = new State(new int[]{38,23,39,24,41,25,42,26,40,27},new int[]{-1,29,-2,22});
    states[29] = new State(-13);
    states[30] = new State(new int[]{38,23,39,24,41,25,42,26,40,27},new int[]{-1,31,-2,22});
    states[31] = new State(new int[]{10,32});
    states[32] = new State(-11);
    states[33] = new State(new int[]{12,34});
    states[34] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-8, new int[]{-7,3});
    rules[2] = new Rule(-7, new int[]{4,31,-6});
    rules[3] = new Rule(-6, new int[]{-4,-6});
    rules[4] = new Rule(-6, new int[]{-5});
    rules[5] = new Rule(-4, new int[]{35,40,10});
    rules[6] = new Rule(-4, new int[]{33,40,10});
    rules[7] = new Rule(-4, new int[]{34,40,10});
    rules[8] = new Rule(-5, new int[]{-3,-5});
    rules[9] = new Rule(-5, new int[]{32,12});
    rules[10] = new Rule(-3, new int[]{-1,10});
    rules[11] = new Rule(-3, new int[]{9,-1,10});
    rules[12] = new Rule(-1, new int[]{-2});
    rules[13] = new Rule(-1, new int[]{40,11,-1});
    rules[14] = new Rule(-2, new int[]{38});
    rules[15] = new Rule(-2, new int[]{39});
    rules[16] = new Rule(-2, new int[]{41});
    rules[17] = new Rule(-2, new int[]{42});
    rules[18] = new Rule(-2, new int[]{40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 5: // decl -> BoolDecl, Ident, Semicolon
#line 31 "mini.y"
               { Compiler.code.Add(new DeclIdentNode(ValueStack[ValueStack.Depth-2].val, CType.Bool)); }
#line default
        break;
      case 6: // decl -> IntDecl, Ident, Semicolon
#line 33 "mini.y"
               { Compiler.code.Add(new DeclIdentNode(ValueStack[ValueStack.Depth-2].val, CType.Int)); }
#line default
        break;
      case 7: // decl -> DoubleDecl, Ident, Semicolon
#line 35 "mini.y"
               { Compiler.code.Add(new DeclIdentNode(ValueStack[ValueStack.Depth-2].val, CType.Double)); }
#line default
        break;
      case 10: // stmnt -> exp, Semicolon
#line 43 "mini.y"
               {
               Compiler.code.Add(ValueStack[ValueStack.Depth-2].node);
               Compiler.code.Add(new SemicolonNode());
               }
#line default
        break;
      case 11: // stmnt -> Write, exp, Semicolon
#line 48 "mini.y"
               { Compiler.code.Add(new WriteNode(ValueStack[ValueStack.Depth-2].node)); }
#line default
        break;
      case 12: // exp -> term
#line 54 "mini.y"
               { CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
#line default
        break;
      case 13: // exp -> Ident, Assign, exp
#line 56 "mini.y"
               { CurrentSemanticValue.node = new AssignNode(ValueStack[ValueStack.Depth-3].val, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 14: // term -> True
#line 60 "mini.y"
               { CurrentSemanticValue.node = new ConstBoolLeaf(true); }
#line default
        break;
      case 15: // term -> False
#line 62 "mini.y"
               { CurrentSemanticValue.node = new ConstBoolLeaf(false); }
#line default
        break;
      case 16: // term -> IntNum
#line 64 "mini.y"
               { CurrentSemanticValue.node = new ConstIntLeaf(int.Parse(ValueStack[ValueStack.Depth-1].val)); }
#line default
        break;
      case 17: // term -> DoubleNum
#line 66 "mini.y"
               { CurrentSemanticValue.node = new ConstDoubleLeaf(double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture)); }
#line default
        break;
      case 18: // term -> Ident
#line 68 "mini.y"
               { CurrentSemanticValue.node = new IdentLeaf(ValueStack[ValueStack.Depth-1].val); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 72 "mini.y"

public Parser(Scanner scanner) : base(scanner) { }

#line default
}
}
