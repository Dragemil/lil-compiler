// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-BGFGHK4
// DateTime: 07.06.2020 16:28:40
// UserName: drage
// Input file <mini.y - 07.06.2020 16:28:28>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Semicolon=10,Assign=11,Eof=12,
    Or=13,And=14,BitOr=15,BitAnd=16,Equality=17,NotEquality=18,
    Greater=19,GreaterOrE=20,Less=21,LessOrE=22,Plus=23,Minus=24,
    Multiplies=25,Divides=26,Not=27,BitNot=28,OpenPar=29,ClosePar=30,
    OpenCurl=31,CloseCurl=32,IntDecl=33,DoubleDecl=34,BoolDecl=35,Error=36,
    Return=37,True=38,False=39,Ident=40,IntNum=41,DoubleNum=42,
    StringVal=43};

public struct ValueType
#line 9 "mini.y"
{
public string      val;
public SyntaxNode  node;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[54];
  private static State[] states = new State[109];
  private static string[] nonTerms = new string[] {
      "decllist", "decl", "prog", "stmnt", "blckstmnt", "exp", "log", "rel", 
      "comp", "factor", "bit", "unar", "term", "start", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-14,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{31,4});
    states[4] = new State(new int[]{35,9,33,12,34,15,29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104,32,108},new int[]{-1,5,-2,7,-3,18,-4,19,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[5] = new State(new int[]{12,6});
    states[6] = new State(-2);
    states[7] = new State(new int[]{35,9,33,12,34,15,29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104,32,108},new int[]{-1,8,-2,7,-3,18,-4,19,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[8] = new State(-3);
    states[9] = new State(new int[]{40,10});
    states[10] = new State(new int[]{10,11});
    states[11] = new State(-5);
    states[12] = new State(new int[]{40,13});
    states[13] = new State(new int[]{10,14});
    states[14] = new State(-6);
    states[15] = new State(new int[]{40,16});
    states[16] = new State(new int[]{10,17});
    states[17] = new State(-7);
    states[18] = new State(-4);
    states[19] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104,32,108},new int[]{-3,20,-4,19,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[20] = new State(-8);
    states[21] = new State(new int[]{10,22});
    states[22] = new State(-10);
    states[23] = new State(new int[]{13,24,14,79,10,-21,30,-21});
    states[24] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-8,25,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[25] = new State(new int[]{17,26,18,56,19,67,20,69,21,71,22,73,13,-24,14,-24,10,-24,30,-24});
    states[26] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-9,27,-10,66,-11,65,-12,64,-13,34});
    states[27] = new State(new int[]{23,28,24,58,17,-27,18,-27,19,-27,20,-27,21,-27,22,-27,13,-27,14,-27,10,-27,30,-27});
    states[28] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-10,29,-11,65,-12,64,-13,34});
    states[29] = new State(new int[]{25,30,26,60,23,-34,24,-34,17,-34,18,-34,19,-34,20,-34,21,-34,22,-34,13,-34,14,-34,10,-34,30,-34});
    states[30] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-11,31,-12,64,-13,34});
    states[31] = new State(new int[]{15,32,16,62,25,-37,26,-37,23,-37,24,-37,17,-37,18,-37,19,-37,20,-37,21,-37,22,-37,13,-37,14,-37,10,-37,30,-37});
    states[32] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,33,-13,34});
    states[33] = new State(-40);
    states[34] = new State(-42);
    states[35] = new State(new int[]{33,38,34,52,29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50},new int[]{-6,36,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[36] = new State(new int[]{30,37});
    states[37] = new State(-48);
    states[38] = new State(new int[]{30,39});
    states[39] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,40,-13,34});
    states[40] = new State(-43);
    states[41] = new State(-49);
    states[42] = new State(-50);
    states[43] = new State(-51);
    states[44] = new State(-52);
    states[45] = new State(-53);
    states[46] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,47,-13,34});
    states[47] = new State(-45);
    states[48] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,49,-13,34});
    states[49] = new State(-46);
    states[50] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,51,-13,34});
    states[51] = new State(-47);
    states[52] = new State(new int[]{30,53});
    states[53] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,54,-13,34});
    states[54] = new State(-44);
    states[55] = new State(new int[]{17,26,18,56,19,67,20,69,21,71,22,73,13,-23,14,-23,10,-23,30,-23});
    states[56] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-9,57,-10,66,-11,65,-12,64,-13,34});
    states[57] = new State(new int[]{23,28,24,58,17,-28,18,-28,19,-28,20,-28,21,-28,22,-28,13,-28,14,-28,10,-28,30,-28});
    states[58] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-10,59,-11,65,-12,64,-13,34});
    states[59] = new State(new int[]{25,30,26,60,23,-35,24,-35,17,-35,18,-35,19,-35,20,-35,21,-35,22,-35,13,-35,14,-35,10,-35,30,-35});
    states[60] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-11,61,-12,64,-13,34});
    states[61] = new State(new int[]{15,32,16,62,25,-38,26,-38,23,-38,24,-38,17,-38,18,-38,19,-38,20,-38,21,-38,22,-38,13,-38,14,-38,10,-38,30,-38});
    states[62] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-12,63,-13,34});
    states[63] = new State(-41);
    states[64] = new State(-39);
    states[65] = new State(new int[]{15,32,16,62,25,-36,26,-36,23,-36,24,-36,17,-36,18,-36,19,-36,20,-36,21,-36,22,-36,13,-36,14,-36,10,-36,30,-36});
    states[66] = new State(new int[]{25,30,26,60,23,-33,24,-33,17,-33,18,-33,19,-33,20,-33,21,-33,22,-33,13,-33,14,-33,10,-33,30,-33});
    states[67] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-9,68,-10,66,-11,65,-12,64,-13,34});
    states[68] = new State(new int[]{23,28,24,58,17,-29,18,-29,19,-29,20,-29,21,-29,22,-29,13,-29,14,-29,10,-29,30,-29});
    states[69] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-9,70,-10,66,-11,65,-12,64,-13,34});
    states[70] = new State(new int[]{23,28,24,58,17,-30,18,-30,19,-30,20,-30,21,-30,22,-30,13,-30,14,-30,10,-30,30,-30});
    states[71] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-9,72,-10,66,-11,65,-12,64,-13,34});
    states[72] = new State(new int[]{23,28,24,58,17,-31,18,-31,19,-31,20,-31,21,-31,22,-31,13,-31,14,-31,10,-31,30,-31});
    states[73] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-9,74,-10,66,-11,65,-12,64,-13,34});
    states[74] = new State(new int[]{23,28,24,58,17,-32,18,-32,19,-32,20,-32,21,-32,22,-32,13,-32,14,-32,10,-32,30,-32});
    states[75] = new State(new int[]{23,28,24,58,17,-26,18,-26,19,-26,20,-26,21,-26,22,-26,13,-26,14,-26,10,-26,30,-26});
    states[76] = new State(new int[]{11,77,15,-53,16,-53,25,-53,26,-53,23,-53,24,-53,17,-53,18,-53,19,-53,20,-53,21,-53,22,-53,13,-53,14,-53,10,-53,30,-53});
    states[77] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50},new int[]{-6,78,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[78] = new State(-22);
    states[79] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,45,24,46,27,48,28,50},new int[]{-8,80,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[80] = new State(new int[]{17,26,18,56,19,67,20,69,21,71,22,73,13,-25,14,-25,10,-25,30,-25});
    states[81] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104,32,107},new int[]{-5,82,-4,83,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[82] = new State(-11);
    states[83] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104,32,107},new int[]{-5,84,-4,83,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[84] = new State(-19);
    states[85] = new State(new int[]{29,86});
    states[86] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50},new int[]{-6,87,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[87] = new State(new int[]{30,88});
    states[88] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104},new int[]{-4,89,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[89] = new State(new int[]{6,90,29,-12,38,-12,39,-12,41,-12,42,-12,40,-12,24,-12,27,-12,28,-12,31,-12,5,-12,7,-12,37,-12,9,-12,8,-12,32,-12});
    states[90] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104},new int[]{-4,91,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[91] = new State(-13);
    states[92] = new State(new int[]{29,93});
    states[93] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50},new int[]{-6,94,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[94] = new State(new int[]{30,95});
    states[95] = new State(new int[]{29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50,31,81,5,85,7,92,37,97,9,99,8,104},new int[]{-4,96,-6,21,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[96] = new State(-14);
    states[97] = new State(new int[]{10,98});
    states[98] = new State(-15);
    states[99] = new State(new int[]{43,100,29,35,38,41,39,42,41,43,42,44,40,76,24,46,27,48,28,50},new int[]{-6,102,-7,23,-8,55,-9,75,-10,66,-11,65,-12,64,-13,34});
    states[100] = new State(new int[]{10,101});
    states[101] = new State(-16);
    states[102] = new State(new int[]{10,103});
    states[103] = new State(-17);
    states[104] = new State(new int[]{40,105});
    states[105] = new State(new int[]{10,106});
    states[106] = new State(-18);
    states[107] = new State(-20);
    states[108] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-15, new int[]{-14,3});
    rules[2] = new Rule(-14, new int[]{4,31,-1,12});
    rules[3] = new Rule(-1, new int[]{-2,-1});
    rules[4] = new Rule(-1, new int[]{-3});
    rules[5] = new Rule(-2, new int[]{35,40,10});
    rules[6] = new Rule(-2, new int[]{33,40,10});
    rules[7] = new Rule(-2, new int[]{34,40,10});
    rules[8] = new Rule(-3, new int[]{-4,-3});
    rules[9] = new Rule(-3, new int[]{32});
    rules[10] = new Rule(-4, new int[]{-6,10});
    rules[11] = new Rule(-4, new int[]{31,-5});
    rules[12] = new Rule(-4, new int[]{5,29,-6,30,-4});
    rules[13] = new Rule(-4, new int[]{5,29,-6,30,-4,6,-4});
    rules[14] = new Rule(-4, new int[]{7,29,-6,30,-4});
    rules[15] = new Rule(-4, new int[]{37,10});
    rules[16] = new Rule(-4, new int[]{9,43,10});
    rules[17] = new Rule(-4, new int[]{9,-6,10});
    rules[18] = new Rule(-4, new int[]{8,40,10});
    rules[19] = new Rule(-5, new int[]{-4,-5});
    rules[20] = new Rule(-5, new int[]{32});
    rules[21] = new Rule(-6, new int[]{-7});
    rules[22] = new Rule(-6, new int[]{40,11,-6});
    rules[23] = new Rule(-7, new int[]{-8});
    rules[24] = new Rule(-7, new int[]{-7,13,-8});
    rules[25] = new Rule(-7, new int[]{-7,14,-8});
    rules[26] = new Rule(-8, new int[]{-9});
    rules[27] = new Rule(-8, new int[]{-8,17,-9});
    rules[28] = new Rule(-8, new int[]{-8,18,-9});
    rules[29] = new Rule(-8, new int[]{-8,19,-9});
    rules[30] = new Rule(-8, new int[]{-8,20,-9});
    rules[31] = new Rule(-8, new int[]{-8,21,-9});
    rules[32] = new Rule(-8, new int[]{-8,22,-9});
    rules[33] = new Rule(-9, new int[]{-10});
    rules[34] = new Rule(-9, new int[]{-9,23,-10});
    rules[35] = new Rule(-9, new int[]{-9,24,-10});
    rules[36] = new Rule(-10, new int[]{-11});
    rules[37] = new Rule(-10, new int[]{-10,25,-11});
    rules[38] = new Rule(-10, new int[]{-10,26,-11});
    rules[39] = new Rule(-11, new int[]{-12});
    rules[40] = new Rule(-11, new int[]{-11,15,-12});
    rules[41] = new Rule(-11, new int[]{-11,16,-12});
    rules[42] = new Rule(-12, new int[]{-13});
    rules[43] = new Rule(-12, new int[]{29,33,30,-12});
    rules[44] = new Rule(-12, new int[]{29,34,30,-12});
    rules[45] = new Rule(-12, new int[]{24,-12});
    rules[46] = new Rule(-12, new int[]{27,-12});
    rules[47] = new Rule(-12, new int[]{28,-12});
    rules[48] = new Rule(-13, new int[]{29,-6,30});
    rules[49] = new Rule(-13, new int[]{38});
    rules[50] = new Rule(-13, new int[]{39});
    rules[51] = new Rule(-13, new int[]{41});
    rules[52] = new Rule(-13, new int[]{42});
    rules[53] = new Rule(-13, new int[]{40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // decllist -> decl, decllist
#line 27 "mini.y"
               { Compiler.AddStatement(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 5: // decl -> BoolDecl, Ident, Semicolon
#line 32 "mini.y"
               { CurrentSemanticValue.node = new DeclIdentNode(ValueStack[ValueStack.Depth-2].val, CType.Bool); }
#line default
        break;
      case 6: // decl -> IntDecl, Ident, Semicolon
#line 34 "mini.y"
               { CurrentSemanticValue.node = new DeclIdentNode(ValueStack[ValueStack.Depth-2].val, CType.Int); }
#line default
        break;
      case 7: // decl -> DoubleDecl, Ident, Semicolon
#line 36 "mini.y"
               { CurrentSemanticValue.node = new DeclIdentNode(ValueStack[ValueStack.Depth-2].val, CType.Double); }
#line default
        break;
      case 8: // prog -> stmnt, prog
#line 40 "mini.y"
               { Compiler.AddStatement(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 9: // prog -> CloseCurl
#line 42 "mini.y"
               { /*YYACCEPT;*/ }
#line default
        break;
      case 10: // stmnt -> exp, Semicolon
#line 46 "mini.y"
               { CurrentSemanticValue.node = new SemicolonNode(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 11: // stmnt -> OpenCurl, blckstmnt
#line 48 "mini.y"
               { Compiler.scopes.Pop(); CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
#line default
        break;
      case 12: // stmnt -> If, OpenPar, exp, ClosePar, stmnt
#line 50 "mini.y"
               { CurrentSemanticValue.node = new IfNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 13: // stmnt -> If, OpenPar, exp, ClosePar, stmnt, Else, stmnt
#line 52 "mini.y"
               { CurrentSemanticValue.node = new IfElseNode(ValueStack[ValueStack.Depth-5].node, ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 14: // stmnt -> While, OpenPar, exp, ClosePar, stmnt
#line 54 "mini.y"
               { CurrentSemanticValue.node = new WhileNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 15: // stmnt -> Return, Semicolon
#line 56 "mini.y"
               { CurrentSemanticValue.node = new ReturnNode(); }
#line default
        break;
      case 16: // stmnt -> Write, StringVal, Semicolon
#line 58 "mini.y"
               { CurrentSemanticValue.node = new WriteStrNode(ValueStack[ValueStack.Depth-2].val); }
#line default
        break;
      case 17: // stmnt -> Write, exp, Semicolon
#line 60 "mini.y"
               { CurrentSemanticValue.node = new WriteNode(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 18: // stmnt -> Read, Ident, Semicolon
#line 62 "mini.y"
               { CurrentSemanticValue.node = new ReadNode(ValueStack[ValueStack.Depth-2].val); }
#line default
        break;
      case 20: // blckstmnt -> CloseCurl
#line 67 "mini.y"
               { var scope = new ScopeNode(); Compiler.scopes.Push(scope); CurrentSemanticValue.node = scope; }
#line default
        break;
      case 22: // exp -> Ident, Assign, exp
#line 72 "mini.y"
               { CurrentSemanticValue.node = new AssignNode(ValueStack[ValueStack.Depth-3].val, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 24: // log -> log, Or, rel
#line 77 "mini.y"
               { CurrentSemanticValue.node = new OrNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 25: // log -> log, And, rel
#line 79 "mini.y"
               { CurrentSemanticValue.node = new AndNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 27: // rel -> rel, Equality, comp
#line 84 "mini.y"
               { CurrentSemanticValue.node = new EqualityNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 28: // rel -> rel, NotEquality, comp
#line 86 "mini.y"
               { CurrentSemanticValue.node = new NotEqualityNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 29: // rel -> rel, Greater, comp
#line 88 "mini.y"
               { CurrentSemanticValue.node = new GreaterNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 30: // rel -> rel, GreaterOrE, comp
#line 90 "mini.y"
               { CurrentSemanticValue.node = new GreaterOrEqualNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 31: // rel -> rel, Less, comp
#line 92 "mini.y"
               { CurrentSemanticValue.node = new LessNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 32: // rel -> rel, LessOrE, comp
#line 94 "mini.y"
               { CurrentSemanticValue.node = new LessOrEqualNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 34: // comp -> comp, Plus, factor
#line 99 "mini.y"
               { CurrentSemanticValue.node = new AdditionNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 35: // comp -> comp, Minus, factor
#line 101 "mini.y"
               { CurrentSemanticValue.node = new SubtractionNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 37: // factor -> factor, Multiplies, bit
#line 106 "mini.y"
               { CurrentSemanticValue.node = new MultiplicationNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 38: // factor -> factor, Divides, bit
#line 108 "mini.y"
               { CurrentSemanticValue.node = new DivisionNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 40: // bit -> bit, BitOr, unar
#line 113 "mini.y"
               { CurrentSemanticValue.node = new BitOrNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 41: // bit -> bit, BitAnd, unar
#line 115 "mini.y"
               { CurrentSemanticValue.node = new BitAndNode(ValueStack[ValueStack.Depth-3].node, ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 43: // unar -> OpenPar, IntDecl, ClosePar, unar
#line 120 "mini.y"
               { CurrentSemanticValue.node = new IntConversionNode(ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 44: // unar -> OpenPar, DoubleDecl, ClosePar, unar
#line 122 "mini.y"
               { CurrentSemanticValue.node = new DoubleConversionNode(ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 45: // unar -> Minus, unar
#line 124 "mini.y"
               { CurrentSemanticValue.node = new NegNode(ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 46: // unar -> Not, unar
#line 126 "mini.y"
               { CurrentSemanticValue.node = new BoolNegNode(ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 47: // unar -> BitNot, unar
#line 128 "mini.y"
               { CurrentSemanticValue.node = new BitNegNode(ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 48: // term -> OpenPar, exp, ClosePar
#line 132 "mini.y"
               { CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node; }
#line default
        break;
      case 49: // term -> True
#line 134 "mini.y"
               { CurrentSemanticValue.node = new ConstBoolLeaf(true); }
#line default
        break;
      case 50: // term -> False
#line 136 "mini.y"
               { CurrentSemanticValue.node = new ConstBoolLeaf(false); }
#line default
        break;
      case 51: // term -> IntNum
#line 138 "mini.y"
               { CurrentSemanticValue.node = new ConstIntLeaf(int.Parse(ValueStack[ValueStack.Depth-1].val)); }
#line default
        break;
      case 52: // term -> DoubleNum
#line 140 "mini.y"
               { CurrentSemanticValue.node = new ConstDoubleLeaf(double.Parse(ValueStack[ValueStack.Depth-1].val,System.Globalization.CultureInfo.InvariantCulture)); }
#line default
        break;
      case 53: // term -> Ident
#line 142 "mini.y"
               { CurrentSemanticValue.node = new IdentLeaf(ValueStack[ValueStack.Depth-1].val); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 146 "mini.y"

public Parser(Scanner scanner) : base(scanner) { }

#line default
}
}
