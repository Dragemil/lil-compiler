
// ==========================================================================
//  GPPG error listing for yacc source file <mini.y - 31.05.2020 19:38:37>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-BGFGHK4
//  DateTime: 31.05.2020 19:40:27
//  UserName: drage
// ==========================================================================



// Uwaga: W wywoÅaniu generatora gppg naleÅ¼y uÅ¼yÄ opcji /gplex

%namespace GardensPoint

%output=Parser.cs

%union
{
public string      val;
public SyntaxNode  node;
}

%token Program If While Read Write Semicolon Assign Eof Or And BitOr BitAnd Equality NotEquality Greater
%token GreaterOrE Less LessOrE Plus Minus Multiplies Divides Not BitNot OpenPar ClosePar OpenCurl CloseCurl
%token IntDecl DoubleDecl BoolDecl
%token <val> True False Ident IntNum DoubleNum StringVal

%type <node> exp term stmnt decl

%%

start     : stmnt start
          | Eof
          ;

stmnt     : decl
          | exp Semicolon
               {
               Compiler.code.Add($1);
               Compiler.code.Add(new SemicolonNode());
               }
          | Write exp Semicolon
               { Compiler.code.Add(new WriteNode($2)); }
          ;

decl      : BoolDecl Ident Semicolon
               { Compiler.code.Add(new DeclIdentNode($2, CType.Bool))}
          : IntDecl Ident Semicolon
//-------^^
// Error: Syntax error, unexpected ':'
// -----------------------------------
               { Compiler.code.Add(new DeclIdentNode($2, CType.Int))}
          : DoubleDecl Ident Semicolon
               { Compiler.code.Add(new DeclIdentNode($2, CType.Double))}
          ;

exp       : term
               { $$ = $1; }
          | Ident Assign exp
               { $$ = new AssignNode($1, $3, lineno); }
          ;

term      : True
               { $$ = new ConstBoolLeaf(true); }
          | False
               { $$ = new ConstBoolLeaf(false); }
          | IntNum
               { $$ = new ConstIntLeaf(int.Parse($1)); }
          | DoubleNum
               { $$ = new ConstDoubleLeaf(double.Parse($1,System.Globalization.CultureInfo.InvariantCulture)); }
          | Ident
               { $$ = new IdentLeaf($1, lineno); }
          ;

%%

int lineno=1;

public Parser(Scanner scanner) : base(scanner) { }

// ==========================================================================

